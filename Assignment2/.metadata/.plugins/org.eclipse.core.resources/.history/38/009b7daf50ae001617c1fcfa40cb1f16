public class MobileDevice{
	public String deviceName; //the device name
	public int valueTag; // an integer between -100 and 100
	Lab lab; // the lab having this device in its inventory
	RentSettings rs; // rent settings
	
	MobileDevice(String deviceName, int valueTag){
		this.deviceName = deviceName;
		this.valueTag = valueTag;
	}
	
	/*MobileDevice(String rentDate, String dueDate, Labs lab){
		rentDevice(rentDate, dueDate, lab);
	}*/
	
	public void setLab(Lab lab) {
		this.lab = lab;
    }
    
	//Have to remake it
	public boolean rentDevice(String rentDate, String dueDate, Lab lab){		
		try{
			if(Helper.isValidDate(rentDate) && Helper.isValidDate(dueDate)){
				if(Helper.timeDifference(rentDate, dueDate) > 0){
					RentSettings rs = new RentSettings(rentDate, dueDate, lab);
					return true;
				}else
					throw new RentPeriodException();
			}else
				throw new DateFormatException();
		}catch(DateFormatException date){
			System.err.println("The date entered is not valid. Correct format for date is (MM/DD/YYYY).");
			return false;
		}catch(RentPeriodException rent){
			System.err.println("The rent period of the device is over.");
			return false;
		}
	}

    public RentSettings getRs() {        
        return rs;
    }

    public void setRs(RentSettings rs) {
        this.rs = rs;
    }
    
    public String deviceName() {
        return "(" + deviceName + ", " + valueTag + ')';
    }
    
    /*NOT FINISHED*/
    // destroy the RentSettings object for this device
    public void returnDevice(Lab lab) {
       //TODO
    }
    
    // return the date when this device is available
    public String availableDate(Lab lab) {
        //TODO
        return "";
    }

    // returns true if the current date is greater than the due date
    public boolean isDeviceOverdue() {
        //TODO
        return false;
    }

    public boolean isRented(Lab l) {
        //TODO
        return false;
    }
    
    @Override
    public boolean equals(Object o) {
    	if(this == o)
			return true;
		if(o == null)
			return false;
		if(!(o instanceof MobileDevice))
			return false;
		return ((MobileDevice)o).deviceName.equals(deviceName) && ((MobileDevice)o).valueTag == valueTag;

    }

    @Override
    public int hashCode() {
        int result = deviceName != null ? deviceName.hashCode() : 0;
        result = 31 * result + valueTag;
        return result;
    }

    @Override
    public String toString() {

        String s = "";
       //TODO
        return s;
    }
    
    private class RentSettings {

        private String rentDate;          // date when the item is requested
        private String dueDate;           // date when the item must be returned
        private boolean borrowed = false; // true if the item is rented

        //default ctr
        private RentSettings() throws DateFormatException {
            Helper.checkDate(rentDate);
            Helper.checkDate(dueDate);
        }

        // private ctr must throw DateFormatException and RentPeriodException
        private RentSettings(String rentDate, String dueDate, Lab lab) throws DateFormatException, RentPeriodException {
            Helper.checkDate(rentDate);
            Helper.checkDate(dueDate);
            
            if(Helper.isValidDate(rentDate) && Helper.isValidDate(dueDate)){
	            if(Helper.timeDifference(rentDate, dueDate) < 0)
					throw new RentPeriodException();
	            
	            this.rentDate = rentDate;
	            this.dueDate = dueDate;
            }else
            	throw new DateFormatException();
        }

        @Override
        public String toString() {
            return "RentSettings{" +
                    "rentDate='" + rentDate + '\'' +
                    ", dueDate='" + dueDate + '\'' + MobileDevice.this.lab.labName +
                    ", borrowed=" + borrowed +
                    '}';
        }
    }
}

